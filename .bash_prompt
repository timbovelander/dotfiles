if [[ $COLORTERM = gnome-* && $TERM = xterm ]] && infocmp gnome-256color >/dev/null 2>&1; then
  export TERM='gnome-256color';
elif infocmp xterm-256color >/dev/null 2>&1; then
  export TERM='xterm-256color';
fi;

reset="\e[0m";
bold="\e[1m";
dim="\e[2m";
underline="\e[4m";
reverse="\e[7m";
default="\e[39m"
black="\e[30m"
red="\e[31m"
green="\e[32m"
yellow="\e[33m"
blue="\e[34m"
magenta="\e[35m"
cyan="\e[36m"
gray_light="\e[37m"
gray="\e[90m"
red_light="\e[0;91m"
green_light="\e[92m"
yellow_light="\e[93m"
blue_light="\e[94m"
magenta_light="\e[95m"
cyan_light="\e[96m"
white="\e[97m"

prompt_git() {
  local s='';
  local branchName='';

  # Check if the current directory is in a Git repository.
  if [ $(git rev-parse --is-inside-work-tree &>/dev/null; echo "${?}") == '0' ]; then

    # check if the current directory is in .git before running git checks
    if [ "$(git rev-parse --is-inside-git-dir 2> /dev/null)" == 'false' ]; then

      # Ensure the index is up to date.
      git update-index --really-refresh -q &>/dev/null;

      # Check for uncommitted changes in the index.
      if ! $(git diff --quiet --ignore-submodules --cached); then
        s+='+';
      fi;

      # Check for unstaged changes.
      if ! $(git diff-files --quiet --ignore-submodules --); then
        s+='!';
      fi;

      # Check for untracked files.
      if [ -n "$(git ls-files --others --exclude-standard)" ]; then
        s+='?';
      fi;

      # Check for stashed files.
      if $(git rev-parse --verify refs/stash &>/dev/null); then
        s+='$';
      fi;

    fi;

    # Get the short symbolic ref.
    # If HEAD isn’t a symbolic ref, get the short SHA for the latest commit
    # Otherwise, just give up.
    branchName="$(git symbolic-ref --quiet --short HEAD 2> /dev/null || \
      git rev-parse --short HEAD 2> /dev/null || \
      echo '(unknown)')";

    [ -n "${s}" ] && s="[${s}]";

    echo -e "${1}${branchName} ${reverse}${s}";
  else
    return;
  fi;
}

# Highlight the user name when logged in as root.
if [[ "${UID}" == 0 ]]; then
	userStyle="${reverse}${red}";
else
	userStyle="${red}";
fi;

# Highlight the hostname when connected via SSH.
if [[ "${SSH_TTY}" ]]; then
	hostStyle="${reverse}${blue}";
else
	hostStyle="${blue}";
fi;

PS1="\[\033]0;\u @ \h : \w\007\]";
PS1+="\[${reset}\]\n";
PS1+="\[${userStyle}\]\u"; # username
PS1+="\[${reset}\] @ ";
PS1+="\[${hostStyle}\]\h"; # host
PS1+="\[${reset}\] : ";
PS1+="\[${green}\]\w"; # working directory
PS1+="\$(prompt_git \"${reset} - ${magenta}\")"; # Git repository details
PS1+="\[${reset}\]\n";
PS1+="\[${gray}\]\\$\[${reset}\] "; # `$` (and reset color)
export PS1;

PS2="\[${gray}\]→\[${reset}\] ";
export PS2;

# Store and restore history so it is synced across terminals
export PROMPT_COMMAND="history -n; history -w; history -c; history -r; $PROMPT_COMMAND"
